-- UILibrary.lua (versão modular atualizada com funções avançadas)

local UILibrary = {}
UILibrary.__index = UILibrary

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Função auxiliar para criar elementos UI
local function Create(class, props)
	local obj = Instance.new(class)
	for k, v in pairs(props) do
		obj[k] = v
	end
	return obj
end

-- Arrastar suavemente
local function MakeDraggable(frame)
	local dragging, offset
	local function update(input)
		local delta = input.Position - offset
		frame.Position = UDim2.new(0, delta.X, 0, delta.Y)
	end
	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			offset = input.Position - frame.AbsolutePosition
		end
	end)
	frame.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
	end)
	RunService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			update(input)
		end
	end)
end

function UILibrary:CreateWindow(title)
	local ScreenGui = Create("ScreenGui", {
		Name = "CustomUILib",
		ResetOnSpawn = false,
		Parent = game.CoreGui
	})

	local MainFrame = Create("Frame", {
		Name = "MainFrame",
		Size = UDim2.new(0, 700, 0, 400),
		Position = UDim2.new(0.5, -350, 0.5, -200),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		BorderSizePixel = 0,
		Active = true,
		Parent = ScreenGui
	})
	MakeDraggable(MainFrame)

	local TitleBar = Create("TextLabel", {
		Size = UDim2.new(1, 0, 0, 30),
		BackgroundColor3 = Color3.fromRGB(30, 30, 30),
		Text = title or "Window",
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.Arcade,
		TextSize = 20,
		Parent = MainFrame
	})

	local TabButtons = Create("Frame", {
		Size = UDim2.new(0, 120, 1, -30),
		Position = UDim2.new(0, 0, 0, 30),
		BackgroundColor3 = Color3.fromRGB(25, 25, 25),
		ClipsDescendants = true,
		Parent = MainFrame
	})

	local InfoPanel = Create("Frame", {
		Size = UDim2.new(0, 170, 1, -30),
		Position = UDim2.new(1, -170, 0, 30),
		BackgroundColor3 = Color3.fromRGB(15, 15, 15),
		Parent = MainFrame
	})

	local ContentFrame = Create("Frame", {
		Size = UDim2.new(1, -290, 1, -30),
		Position = UDim2.new(0, 120, 0, 30),
		BackgroundTransparency = 1,
		Name = "ContentFrame",
		Parent = MainFrame
	})

	-- Player info
	local function CreatePlayerInfo(parent, label, position)
		local l = Create("TextLabel", {
			Size = UDim2.new(1, -10, 0, 20),
			Position = position,
			BackgroundTransparency = 1,
			Text = label,
			TextColor3 = Color3.new(1, 1, 1),
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.Arcade,
			TextSize = 14,
			Parent = parent
		})
		return l
	end

	local Headshot = Create("ImageLabel", {
		Size = UDim2.new(0, 60, 0, 60),
		Position = UDim2.new(0.5, -30, 0, 5),
		BackgroundTransparency = 1,
		Parent = InfoPanel
	})

	local NameLabel = CreatePlayerInfo(InfoPanel, "Name: -", UDim2.new(0, 5, 0, 70))
	local IDLabel = CreatePlayerInfo(InfoPanel, "UserID: -", UDim2.new(0, 5, 0, 90))
	local HPLabel = CreatePlayerInfo(InfoPanel, "HP: -", UDim2.new(0, 5, 0, 110))
	local TimeLabel = CreatePlayerInfo(InfoPanel, "Session: 0s", UDim2.new(0, 5, 0, 130))

	-- Atualiza info local
	local function UpdateLocalInfo()
		local userId = LocalPlayer.UserId
		Headshot.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..userId.."&width=420&height=420&format=png"
		NameLabel.Text = "Name: " .. LocalPlayer.Name
		IDLabel.Text = "UserID: " .. userId
		HPLabel.Text = "HP: " .. math.floor(LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health or 0)
	end
	spawn(function()
		local timeElapsed = 0
		while true do
			UpdateLocalInfo()
			timeElapsed += 1
			TimeLabel.Text = "Session: " .. timeElapsed .. "s"
			wait(1)
		end
	end)

	-- Pesquisa / Espectador
	local searchBox = Create("TextBox", {
		PlaceholderText = "Search player...",
		Size = UDim2.new(1, -10, 0, 25),
		Position = UDim2.new(0, 5, 1, -95),
		BackgroundColor3 = Color3.fromRGB(30, 30, 30),
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.Arcade,
		TextSize = 14,
		Parent = InfoPanel
	})

	local resultLabel = Create("TextLabel", {
		Size = UDim2.new(1, -10, 0, 20),
		Position = UDim2.new(0, 5, 1, -65),
		Text = "Result: None",
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.Arcade,
		TextSize = 14,
		BackgroundTransparency = 1,
		Parent = InfoPanel
	})

	local spectateBtn = Create("TextButton", {
		Size = UDim2.new(1, -10, 0, 20),
		Position = UDim2.new(0, 5, 1, -40),
		Text = "Spectate",
		TextColor3 = Color3.new(1, 1, 1),
		BackgroundColor3 = Color3.fromRGB(40, 40, 40),
		Font = Enum.Font.Arcade,
		TextSize = 14,
		Parent = InfoPanel
	})

	local camera = workspace.CurrentCamera
	local spectating = nil
	
	spectateBtn.MouseButton1Click:Connect(function()
		if spectating then
			camera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
			spectateBtn.Text = "Spectate"
			spectating = nil
		else
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Name:lower():find(searchBox.Text:lower()) or player.DisplayName:lower():find(searchBox.Text:lower()) then
					if player.Character and player.Character:FindFirstChild("Humanoid") then
						camera.CameraType = Enum.CameraType.Custom
						camera.CameraSubject = player.Character:FindFirstChild("Humanoid")
						spectateBtn.Text = "Unspectate"
						spectating = player
						resultLabel.Text = "Result: " .. player.Name
						break
					end
				end
			end
		end
	end)

	local self = setmetatable({}, UILibrary)
	self.Tabs = {}
	self.CurrentTab = nil
	self.TabButtons = TabButtons
	self.ContentFrame = ContentFrame
	return self
end

function UILibrary:CreateTab(name)
	local TabButton = Create("TextButton", {
		Size = UDim2.new(1, 0, 0, 30),
		Text = name,
		BackgroundColor3 = Color3.fromRGB(40, 40, 40),
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.Arcade,
		TextSize = 18,
		Parent = self.TabButtons
	})

	local TabContent = Create("ScrollingFrame", {
		Size = UDim2.new(1, 0, 1, 0),
		CanvasSize = UDim2.new(0, 0, 10, 0),
		BackgroundTransparency = 1,
		Visible = false,
		ScrollBarThickness = 4,
		Parent = self.ContentFrame
	})

	TabButton.MouseButton1Click:Connect(function()
		if self.CurrentTab then
			self.CurrentTab.Visible = false
		end
		self.CurrentTab = TabContent
		TabContent.Visible = true
	end)

	self.Tabs[name] = { Button = TabButton, Content = TabContent }
	if not self.CurrentTab then
		self.CurrentTab = TabContent
		TabContent.Visible = true
	end
	return TabContent
end

function UILibrary:CreateToggle(tabContent, text, callback)
	local Toggle = Create("TextButton", {
		Size = UDim2.new(1, -10, 0, 30),
		Position = UDim2.new(0, 5, 0, #tabContent:GetChildren() * 32),
		BackgroundColor3 = Color3.fromRGB(35, 35, 35),
		TextColor3 = Color3.new(1, 1, 1),
		Text = "[ OFF ] " .. text,
		Font = Enum.Font.Arcade,
		TextSize = 16,
		Parent = tabContent
	})

	local state = false
	Toggle.MouseButton1Click:Connect(function()
		state = not state
		Toggle.Text = (state and "[ ON  ] " or "[ OFF ] ") .. text
		if callback then callback(state) end
	end)
end

return UILibrary
